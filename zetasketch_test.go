package zetasketch_test

import (
	"encoding/base64"
	"fmt"
	"testing"

	. "github.com/bsm/zetasketch"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("HLL", func() {
	var subject *HLL

	BeforeEach(func() {
		subject = NewHLL(10, 10)

		// real count = 3 uniques:
		subject.AddBytes([]byte("foo"))
		subject.AddBytes([]byte("bar"))
		subject.AddBytes([]byte("foo")) // dupe
		subject.AddBytes([]byte("baz"))
	})

	// TODO: uncomment when/if implemented in internal/hllplus.
	//
	// It("should merge another aggregator", func() {
	// 	another, err := NewHLL(10, 10)
	// 	Expect(err).NotTo(HaveOccurred())
	// 	another.Add([]byte("baz"))
	// 	another.Add([]byte("baz"))
	// 	another.Add([]byte("qux"))

	// 	Expect(subject.Merge(another)).To(Succeed())
	// 	Expect(subject.Count()).To(BeNumerically("==", 4)) // 3 uniques from `subject`, 2 uniques in `another`, but 1 overlap
	// })

	It("should marshal", func() {
		data, err := subject.Marshal()
		Expect(err).NotTo(HaveOccurred())

		// few entries:
		Expect(base64.StdEncoding.EncodeToString(data)).To(Equal(
			// `SELECT HLL_COUNT.EXTRACT(FROM_BASE64("THIS VALUE"))` returns `3` - correct
			`ggeFCBgKKohwEAQYAg==`,
		))

		for i := 0; i < 400; i++ {
			subject.AddBytes([]byte(fmt.Sprintf("%04d", i)))
		}

		data, err = subject.Marshal()
		Expect(err).NotTo(HaveOccurred())

		// bunch of entries:
		Expect(base64.StdEncoding.EncodeToString(data)).To(Equal(
			// `SELECT HLL_COUNT.EXTRACT(FROM_BASE64("THIS VALUE"))` returns `406` - expected
			`ggeFCBgKKoAIAgADAAEAAQEAAAAAAAAAAQAAAwAAAQIAAAAABQEAAQABAAAAAAAAAAMAAAAAAAEAAQMAAAAAAQAAAAABAgIAAAMCAQIAAAAAAAAAAAACAAAAAQEBAQQAAAAAAAEAAAMAAAAAAAABAwAAAAIAAQABAgEAAAEAAAAAAQMDAwAAAAAAAQMAAAAAAQAAAAAAAAAAAAABAAAAAAYAAwAAAwAAAAAAAAAAAgAAAAAAAAEAAAECAAAAAQABAAAAAgAAAAAAAAAAAAEAAAAAAAAAAgAAAAEAAAIAAAAABwQAAAABAAAAAwEBAAADAQAAAwEBAgcAAgAAAAAAAAAAAAABAQABAQABAAABAAMAAAAAAAAABAAABwAAAAAFAAMAAQEAAgIAAAMAAAEAAAAAAQIAAAAAAAAAAAIAAQAAAQEAAAAACgAAAAIAAAAAAAABAAAAAAAAAAEAAAADAQAAAQAAAQIAAQAAAAAAAwADBAABAgAAAAAABAAAAAAAAQAAAQMBAQAAAQUAAAAAAQUAAQQAAAAAAAAAAQAAAAACAQUAAAAAAAAAAgUAAgAEAAUCAAAAAwABAgADAQMAAAAAAAAAAAAAAAAAAAMCAgAAAAEAAQAABAQEAAEBAgEAAwEAAAIAAQAAAAQAAAMAAAAAAwIAAAAAAwAAAAAAAAEAAwEAAAAAAAAFAgAAAQABAgACBAYAAAAAAwQAAAMDAQEAAAEAAAAAAAEAAAADAAEDAQAABAMAAAABAQAAAAUCAAAAAAAAAAAAAAICAAAACwAAAAAAAAAAAAEAAAAAAAACAAAAAAACAAABAAAAAAAAAAAFAAAAAQAAAAEBAQAAAAAAAwMDAAABAAAAAAIAAwAAAgACAAABAAAAAAIAAQAAAAMDAAABAAAAAAAAAAAAAAAAAAEBAAECAAAAAAEAAAABAAAAAwAAAwABAAAAAAAAAAAAAAAAAAABAAEABwEBAQECAAEABAAAAAIAAAABAAAAAAAAAgAAAAAAAQAAAgIAAgAAAAAAAAEAAQAAAAIBAAABAQAAAAAAAwABAAAAAAAEAAAAAwEDAAABAQAAAAQAAAACAAACAwACAAMAAAIDAgEDAAABAAABAAAAAgAAAAAAAAADAAMGAAADAAIGAwAAAAIBAAAAAgADAAAAAAACAAEAAAEAAAEAAAEAAQQAAgIAAAAAAAAABgAAAAAAAAAAAgAAAAEAAgAAAgIAAAAAAAIBAAUAAAABAAQAAAABAAACAwAAAAQDAAAAAAEEAAEBAQAAAAABAAABAAAAAAAAAQACAAIAAAABAAEAAQIAAAEEAAcBAAACAAAAAAEBAAAAAAAAAAIAAAACAAABAwADAAAAAAAAAAAAAAhwEJQDGAI=`,
		))
	})
})

func TestSuite(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "zetasketch")
}
