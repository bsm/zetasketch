//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Serialized state of HyperLogLogPlusPlus aggregator.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.11.3
// source: zetasketch/hllplus-unique.proto

package zetasketch

import (
	_ "."
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Represents an HLL++ aggregator in either sparse or normal representation.
// For more details on the algorithm, the representations and the concepts
// please check the HLL++ paper (https://goo.gl/pc916Z).
type HyperLogLogPlusUniqueStateProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of sparse list, i.e., how many different indexes are present in
	// "sparse_data".
	SparseSize *int32 `protobuf:"varint,2,opt,name=sparse_size,json=sparseSize" json:"sparse_size,omitempty"`
	// Precision / number of buckets for the normal representation.
	//
	// This field is used slightly differently across the v1 and v2 versions of
	// the algorithm (see the encoding_version field in the AggregatorStateProto):
	//
	//   * In v1 this field is the total number of buckets 2^p where "p" is the
	//     requested precision. Accepted values are powers of two in the [2^10,
	//     2^24] interval.
	//   * In v2 this field is the precision "p" directly. Accepted values are in
	//     the range [10, 24].
	//
	// Encoding the precision rather than the number of buckets allows us to save
	// 1-2 bytes which makes a fair difference when storing many small
	// cardinalities.
	//
	// Note that different implementations might choose to not support the whole
	// range of precisions from [10, 24].
	PrecisionOrNumBuckets *int32 `protobuf:"varint,3,opt,name=precision_or_num_buckets,json=precisionOrNumBuckets" json:"precision_or_num_buckets,omitempty"`
	// Precision / number of buckets for sparse representation.
	//
	// This field is used slightly differently across the v1 and v2 versions of
	// the algorithm (see the encoding_version field in the AggregatorStateProto):
	//
	//   * In v1 this field is 2^sp where "sp" is the sparse precision. Accepted
	//     values are powers of two in the [2^p, 2^25] interval.
	//   * In v2 this field represents the precision "sp" directly. Accepted
	//     values are in the range [p, 25].
	//
	// Encoding the precision rather than the number of buckets allows us to save
	// 2-3 bytes which makes a fair difference when storing many small
	// cardinalities.
	SparsePrecisionOrNumBuckets *int32 `protobuf:"varint,4,opt,name=sparse_precision_or_num_buckets,json=sparsePrecisionOrNumBuckets" json:"sparse_precision_or_num_buckets,omitempty"`
	// Normal data representation. If this field is populated, there are exactly
	// 2^p bytes in it.
	//
	// data[idx] represents rhoW for the substream with the given "idx". See the
	// the HLL++ paper (https://goo.gl/pc916Z) for a description of how "rhoW" and
	// "idx" are computed.
	Data []byte `protobuf:"bytes,5,opt,name=data" json:"data,omitempty"`
	// Sparse data representation.
	//
	// IMPORTANT: It is considered an error if the size of this field is bigger
	// than precision_or_num_buckets (v1), resp. 2^precision_or_num_buckets (v2).
	// The normal encoding should be used in this case since the memory usage
	// would be smaller.
	//
	// For a sorted list of unsigned integers representing sparse data encodings,
	// this field contains the varint encoding for the differences between
	// consecutive values in the list:
	//   list[0], list[1] - list[0], ... , list[n] - list[n - 1]
	// Note: if "encoding_version" of the enclosing AggregatorStateProto is 1, the
	// diffs are encoded as signed varints using ZigZag encoding and the
	// sparse encodings are the ones defined in the HLL++ paper
	// (https://goo.gl/pc916Z), i.e., different than the ones below.
	//
	// In v2, there are two encodings possible for a value in sparse data format:
	// enc(idx, rhoW) = 1) 1 << (max(sp, p+6)) | (idx >> (sp - p)) | rhoW
	//                    if the last sp - p bits of idx are all 0;
	//                  2) idx, otherwise.
	SparseData []byte `protobuf:"bytes,6,opt,name=sparse_data,json=sparseData" json:"sparse_data,omitempty"`
}

func (x *HyperLogLogPlusUniqueStateProto) Reset() {
	*x = HyperLogLogPlusUniqueStateProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zetasketch_hllplus_unique_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperLogLogPlusUniqueStateProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperLogLogPlusUniqueStateProto) ProtoMessage() {}

func (x *HyperLogLogPlusUniqueStateProto) ProtoReflect() protoreflect.Message {
	mi := &file_zetasketch_hllplus_unique_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperLogLogPlusUniqueStateProto.ProtoReflect.Descriptor instead.
func (*HyperLogLogPlusUniqueStateProto) Descriptor() ([]byte, []int) {
	return file_zetasketch_hllplus_unique_proto_rawDescGZIP(), []int{0}
}

func (x *HyperLogLogPlusUniqueStateProto) GetSparseSize() int32 {
	if x != nil && x.SparseSize != nil {
		return *x.SparseSize
	}
	return 0
}

func (x *HyperLogLogPlusUniqueStateProto) GetPrecisionOrNumBuckets() int32 {
	if x != nil && x.PrecisionOrNumBuckets != nil {
		return *x.PrecisionOrNumBuckets
	}
	return 0
}

func (x *HyperLogLogPlusUniqueStateProto) GetSparsePrecisionOrNumBuckets() int32 {
	if x != nil && x.SparsePrecisionOrNumBuckets != nil {
		return *x.SparsePrecisionOrNumBuckets
	}
	return 0
}

func (x *HyperLogLogPlusUniqueStateProto) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HyperLogLogPlusUniqueStateProto) GetSparseData() []byte {
	if x != nil {
		return x.SparseData
	}
	return nil
}

var file_zetasketch_hllplus_unique_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*_.AggregatorStatsProto)(nil),
		ExtensionType: (*_.UniqueStatsProto)(nil),
		Field:         112,
		Name:          "zetasketch.hyperloglog_plus_unique_stats",
		Tag:           "bytes,112,opt,name=hyperloglog_plus_unique_stats",
		Filename:      "zetasketch/hllplus-unique.proto",
	},
	{
		ExtendedType:  (*_.AggregatorStateProto)(nil),
		ExtensionType: (*HyperLogLogPlusUniqueStateProto)(nil),
		Field:         112,
		Name:          "zetasketch.hyperloglogplus_unique_state",
		Tag:           "bytes,112,opt,name=hyperloglogplus_unique_state",
		Filename:      "zetasketch/hllplus-unique.proto",
	},
}

// Extension fields to _.AggregatorStatsProto.
var (
	// This field id should match AggregatorType.HYPERLOGLOG_PLUS_UNIQUE
	//
	// optional zetasketch.UniqueStatsProto hyperloglog_plus_unique_stats = 112;
	E_HyperloglogPlusUniqueStats = &file_zetasketch_hllplus_unique_proto_extTypes[0]
)

// Extension fields to _.AggregatorStateProto.
var (
	// This field id should match AggregatorType.HYPERLOGLOG_PLUS_UNIQUE
	//
	// optional zetasketch.HyperLogLogPlusUniqueStateProto hyperloglogplus_unique_state = 112;
	E_HyperloglogplusUniqueState = &file_zetasketch_hllplus_unique_proto_extTypes[1]
)

var File_zetasketch_hllplus_unique_proto protoreflect.FileDescriptor

var file_zetasketch_hllplus_unique_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x7a, 0x65, 0x74, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x2f, 0x68, 0x6c, 0x6c,
	0x70, 0x6c, 0x75, 0x73, 0x2d, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x7a, 0x65, 0x74, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x1a, 0x10, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x1f, 0x48, 0x79, 0x70, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x4c, 0x6f, 0x67, 0x50, 0x6c, 0x75, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x4e, 0x75, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x73, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x4e, 0x75, 0x6d,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x08, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x23, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x3a, 0x81, 0x01, 0x0a, 0x1d, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x67, 0x6c, 0x6f, 0x67,
	0x5f, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x20, 0x2e, 0x7a, 0x65, 0x74, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x2e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x7a, 0x65, 0x74,
	0x61, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x1a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x67, 0x6c, 0x6f, 0x67, 0x50, 0x6c, 0x75, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x3a, 0x8f, 0x01, 0x0a, 0x1c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f,
	0x67, 0x6c, 0x6f, 0x67, 0x70, 0x6c, 0x75, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x7a, 0x65, 0x74, 0x61, 0x73, 0x6b, 0x65, 0x74,
	0x63, 0x68, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x7a, 0x65, 0x74, 0x61, 0x73, 0x6b, 0x65, 0x74, 0x63, 0x68, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x4c, 0x6f, 0x67, 0x50, 0x6c, 0x75, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x1a, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x6f, 0x67, 0x6c, 0x6f, 0x67, 0x70, 0x6c, 0x75, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x1e, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x7a, 0x65, 0x74, 0x61,
	0x73, 0x6b, 0x65, 0x74, 0x63, 0x68,
}

var (
	file_zetasketch_hllplus_unique_proto_rawDescOnce sync.Once
	file_zetasketch_hllplus_unique_proto_rawDescData = file_zetasketch_hllplus_unique_proto_rawDesc
)

func file_zetasketch_hllplus_unique_proto_rawDescGZIP() []byte {
	file_zetasketch_hllplus_unique_proto_rawDescOnce.Do(func() {
		file_zetasketch_hllplus_unique_proto_rawDescData = protoimpl.X.CompressGZIP(file_zetasketch_hllplus_unique_proto_rawDescData)
	})
	return file_zetasketch_hllplus_unique_proto_rawDescData
}

var file_zetasketch_hllplus_unique_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_zetasketch_hllplus_unique_proto_goTypes = []interface{}{
	(*HyperLogLogPlusUniqueStateProto)(nil), // 0: zetasketch.HyperLogLogPlusUniqueStateProto
	(*_.AggregatorStatsProto)(nil),          // 1: zetasketch.AggregatorStatsProto
	(*_.AggregatorStateProto)(nil),          // 2: zetasketch.AggregatorStateProto
	(*_.UniqueStatsProto)(nil),              // 3: zetasketch.UniqueStatsProto
}
var file_zetasketch_hllplus_unique_proto_depIdxs = []int32{
	1, // 0: zetasketch.hyperloglog_plus_unique_stats:extendee -> zetasketch.AggregatorStatsProto
	2, // 1: zetasketch.hyperloglogplus_unique_state:extendee -> zetasketch.AggregatorStateProto
	3, // 2: zetasketch.hyperloglog_plus_unique_stats:type_name -> zetasketch.UniqueStatsProto
	0, // 3: zetasketch.hyperloglogplus_unique_state:type_name -> zetasketch.HyperLogLogPlusUniqueStateProto
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	2, // [2:4] is the sub-list for extension type_name
	0, // [0:2] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_zetasketch_hllplus_unique_proto_init() }
func file_zetasketch_hllplus_unique_proto_init() {
	if File_zetasketch_hllplus_unique_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_zetasketch_hllplus_unique_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperLogLogPlusUniqueStateProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zetasketch_hllplus_unique_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_zetasketch_hllplus_unique_proto_goTypes,
		DependencyIndexes: file_zetasketch_hllplus_unique_proto_depIdxs,
		MessageInfos:      file_zetasketch_hllplus_unique_proto_msgTypes,
		ExtensionInfos:    file_zetasketch_hllplus_unique_proto_extTypes,
	}.Build()
	File_zetasketch_hllplus_unique_proto = out.File
	file_zetasketch_hllplus_unique_proto_rawDesc = nil
	file_zetasketch_hllplus_unique_proto_goTypes = nil
	file_zetasketch_hllplus_unique_proto_depIdxs = nil
}
